timeArray = (1:numberOfStrips)' / samplingRate;

# Adaptive Search.
if enableAdaptiveSearch:
    scaledDownReferenceFrame = scale_down(referenceFrame);
    for each frame in numberOfFrames:
        scaledDownFrame = scale_down(frame);
        correlationMap = normalized_cross_correlation(
            scaledDownFrame, scaledDownReferenceFrame);
        yPeak = FindPeak(correlationMap);
        estimatedStripYLocations[frame*stripsPerFrame] = yPeak;
    estimatedStripYLocations = interpolate(estimatedStripYLocations);
    estimatedStripYlocations = scale_up(estimatedStripYLocations);

# Cross Correlate Each Strip.
for each strip in numberOfStrips:
    if strip.frame in badFrames:
        continue;
    correlationMap = normalized_cross_correlation(strip, referenceFrame);

    if enableAdaptiveSearch:
        adaptedCorrelationMap = crop(correlationMap,
            around=estimatedStripYLocations[strip], height=searchWindowHeight)
        xPeak, yPeak, peakValue, _ = FindPeak(adaptedCorrelationMap);
    if not enableAdaptiveSearch or adaptiveSearchPeak not acceptable:
        xPeak, yPeak, peakValue, _ = FindPeak(correlationMap);

    if enableSubpixelInterpolation:
        yPeak, xPeak = interpolate(correlationMap, [yPeak, xPeak]);

    if enableGaussianFiltering:
        peakVicinity = crop(correlationMap, around=[yPeak, xPeak], height=width=SDWindowSize);
        standDev1[strip] = fit_gaussian(peakVicinity[middleRow])['standDev'];
        standDev2[strip] = fit_gaussian(peakVicinity[middleCol])['standDev'];

    rawEyePositionTraces[strip] = [xPeak, yPeak];

# Subtract from stationary expected traces to get net movement.
rawEyePositionTraces -= expectedPositionTraces;

# Determine useful eye position traces.
if enableGaussianFiltering:
    if standDev1 <= maximumSD and
        standDev2 <= maximumSD and
        peakValue >= minimumPeakThreshold:
        keep;
    else:
        discard;
else:
    if secondPeakValue / peakValue <= maximumPeakRatio and
        peakValue >= minimumPeakThreshold:
        keep;
    else:
        discard;
